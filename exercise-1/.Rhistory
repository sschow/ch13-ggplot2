library(ggplot2)
library(dplyr)
colnames(diamonds)
nrow(diamonds)
diamonds_sample <- sample_n(diamonds)
diamonds_sample <- sample_n(diamonds, 1000)
View(diamonds_sample)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = clarity)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
stat_bin(aes(x = prices, color = clarity), binwidth = 4)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, color = clarity), binwidth = 4)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, color = clarity), binwidth = 10)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, color = clarity), binwidth = 100)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, color = clarity), binwidth = 1000)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, fill = clarity), binwidth = 1000)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, fill = clarity), binwidth = 10000)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, fill = clarity), binwidth = 1000)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 1000)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 100)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 10)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 5)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 3)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 1)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "darkviolet") +
geom_smooth(mapping = aes(x = carat, y = price), color = "skyblue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "darkviolet", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "skyblue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "skyblue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "royalblue1")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "royalblue2")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "royalblue3")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "turquoise")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "turquoise1")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "turquoise2")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "turquoise3")
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds_sample) +
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds_sample) +
stat_summary(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity)) +
coord_flip()
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = drv), position = "fill")
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_x_log10()
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price))
#scale_y_log10()
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, fill = clarity), binwidth = 1000)
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 1)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "turquoise3")
## Bonus
# Draw a bar chart of average diamond prices by clarity, and include "error bars"
# marking the standard error of each measurement.
#
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
---
title: "Participation 6"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
setwd("~/Desktop/INFO201/ch13-ggplot2")
setwd("~/Desktop/INFO201/ch13-ggplot2/exercise-1")
plot_with_clarity <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
sample_diamonds_clarity <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
entire_diamonds_clarity <- ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds_sample) +
stat_bin(aes(x = price, fill = clarity), binwidth = 1000)
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
ggplot(data = diamonds_sample) +
stat_bin(aes(x = depth, fill = clarity), binwidth = 1)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "mediumpurple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price), color = "turquoise3")
## Bonus
# Draw a bar chart of average diamond prices by clarity, and include "error bars"
# marking the standard error of each measurement.
#
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
